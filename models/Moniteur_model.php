<?php
/* 
 * Generated by CRUDigniter v3.0 Beta 
 * www.crudigniter.com
 */
 
class Moniteur_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }
    
    
    function temp()
    {
        
    $WbemLocator = new COM ("WbemScripting.SWbemLocator");
    $WbemServices = $WbemLocator->ConnectServer('localhost', 'root\\wmi');
    $WbemServices->Security_->ImpersonationLevel = 3;

    $temp =    $WbemServices->ExecQuery("Select CurrentTemperature from MSAcpi_ThermalZoneTemperature");
       return $temp; 
    }
    
    function templive($ip,$utilisateur,$mdp)
    {
        
    $WbemLocator = new COM ("WbemScripting.SWbemLocator");
    $WbemServices = $WbemLocator->ConnectServer($ip, 'root\\wmi', $utilisateur, $mdp);
    $WbemServices->Security_->ImpersonationLevel = 3;

    $temp =    $WbemServices->ExecQuery("Select CurrentTemperature from MSAcpi_ThermalZoneTemperature");
       return $temp; 
    }
    
    function os()
    {
        $obj = new COM ( 'winmgmts://localhost/root/CIMV2' );
        $os = $obj->ExecQuery("Select CodeSet,OSLanguage,Version,Caption,OSArchitecture,TotalVisibleMemorySize,FreePhysicalMemory from Win32_OperatingSystem");
       
        return $os ;
    }
    function oslive($ip,$utilisateur,$mdp)
    {
     $WbemLocator = new COM ("WbemScripting.SWbemLocator");
    $WbemServices = $WbemLocator->ConnectServer($ip, 'root\\CIMV2', $utilisateur, $mdp);
    $WbemServices->Security_->ImpersonationLevel = 3;
    
     $oslive =  $WbemServices->ExecQuery("Select TotalVisibleMemorySize,FreePhysicalMemory from Win32_OperatingSystem");
     $cpulive = $WbemServices->ExecQuery("Select LoadPercentage from Win32_Processor");  
     return array(
    'oslive' => $oslive,
    'cpulive' => $cpulive
     
) ;
    
    }
   
    
    function cs()
    {
        $obj = new COM ( 'winmgmts://localhost/root/CIMV2' );
        
        $cs = $obj->ExecQuery("Select Name,Manufacturer,Model from Win32_ComputerSystem");
       
        return $cs;
    }
    function cpu()
    {
        $obj = new COM ( 'winmgmts://localhost/root/CIMV2' );
        
        $cpu = $obj->ExecQuery("Select LoadPercentage,Name from Win32_Processor");
        
        return $cpu ;
    }
    
    function process()
    {
        $obj = new COM ( 'winmgmts://localhost/root/CIMV2' );
        
        $Process =  $obj->ExecQuery("Select Caption from Win32_Process");
       
        return $Process;
    }
    function disk()
    {   
        $HARD_DISK=3;
        $obj = new COM ( 'winmgmts://localhost/root/CIMV2' );
        
        $disk =  $obj->ExecQuery("Select Name, Size, FreeSpace, FileSystem, DriveType from Win32_LogicalDisk WHERE DriveType =".$HARD_DISK."");
        return $disk;
    }
    
    function lastboot()
 {
    $lastboot=shell_exec('systeminfo | find /i "Heure de"');
    $lastboot= substr($lastboot, 31);
    return $lastboot ;
     
 }
 
 function uptime()
 {
        $uptime =  shell_exec('uptime.exe');
        $uptime=  substr($uptime, 17);
        $uptime= str_replace('days','Jours',$uptime) ;
        return $uptime;
     
     
 }
 
 
 


   function testping($ip)
 {
     $ping= utf8_decode(shell_exec('ping -n 1 '.$ip));
     
     $ping = str_replace('requ?te', 'requête', $ping);
     $ping = str_replace('donn?es?', 'données', $ping);
     $ping = str_replace('R?ponse', 'Réponse', $ping);
     $ping = str_replace('?: octets', ' : octets', $ping);
     $ping = str_replace('Paquets?', 'Paquets', $ping);
     $ping = str_replace('envoy?s', 'envoyés', $ping);
     $ping = str_replace('re?us', 'reçus', $ping);
     $ping = str_replace('Dur?e', 'Durée', $ping);
     $ping = str_replace('D?lai d\'attente de la demande d?pass?.', 'Délai d\'attente de la demande dépassé.', $ping);
     $ping = str_replace('?: Impossible de joindre l\'h?te de destination.', ' : Impossible de joindre l\'hôte de destination.', $ping);
						  
      if (strpos($ping, 'Impossible') !== false) {
	 $reponse='&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#" class="btn btn-danger btn-xs"><span class="fa fa-thumbs-down"></span> Down</a>';
	 
	 
	 
      }
       elseif (strpos($ping, 'attente de la demande') !== false) {
	  $reponse='&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#" class="btn btn-warning btn-xs"><span class="fa fa-exclamation-triangle"></span> Erreur</a>';
	}
          else
        {
         $reponse='&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#" class="btn btn-success btn-xs"><span class="fa fa-thumbs-o-up"></span> UP</a>';
        }
     return $reponse ;
 }
 
   function get_agent($agent)
    {
        return $this->db->get_where('agents',array('nom_agent'=>$agent))->row_array();
    }
    
   function get_agent_ip($ip)
    {
        return $this->db->get_where('agents',array('ip'=>$ip))->row_array();
    } 
 
   function get_all_agents()
    {
        return $this->db->get('agents')->result_array();
    }
    
    function remotepc($ip,$utilisateur,$mdp)
    {
        $HARD_DISK=3;
    $WbemLocator = new COM ("WbemScripting.SWbemLocator");
    $WbemServices = $WbemLocator->ConnectServer($ip, 'root\\CIMV2', $utilisateur, $mdp);
    $WbemServices->Security_->ImpersonationLevel = 3;
    
     $os =  $WbemServices->ExecQuery("Select CodeSet,OSLanguage,Version,Caption,OSArchitecture,TotalVisibleMemorySize,FreePhysicalMemory from Win32_OperatingSystem");
    $cs = $WbemServices->ExecQuery("Select Name,Manufacturer,Model from Win32_ComputerSystem");
    $cpu = $WbemServices->ExecQuery("Select LoadPercentage,Name from Win32_Processor");
     $Process =  $WbemServices->ExecQuery("Select Caption from Win32_Process");
     $disk =  $WbemServices->ExecQuery("Select Name, Size, FreeSpace, FileSystem, DriveType from Win32_LogicalDisk WHERE DriveType =".$HARD_DISK."");
    
   
            
     $lastboot=shell_exec('systeminfo | find /i "Heure de"');
    $lastboot= substr($lastboot, 31);
     
    $uptime =  shell_exec('uptime.exe');
        $uptime=  substr($uptime, 17);
        $uptime= str_replace('days','Jours',$uptime) ;
        
     return array(
    'os' => $os,
    'cs' => $cs,
    'cpu' => $cpu,
    'Process' => $Process,
    'disk' => $disk,
     'lastboot'=>  $lastboot,
     'uptime'=> $uptime    
) ;
    }
}
